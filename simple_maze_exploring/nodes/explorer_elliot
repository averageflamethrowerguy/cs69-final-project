#!/usr/bin/env python
'''
Explorer Node:

Overview of operations:
The explorer nodes' main function is to explore an unknown area and map it.
Multiple explorer nodes should run simultaneously.

Algorithm:
- robot rotates a full rotation to see its immediate surroundings
    - if the robot encounters another robot
        - map merge takes place
    - for each new area it sees
        - checks if that area is in its local map
            - if it is not, it adds it to a group of locations to be explored
    - robot calculates the longest possible (single direction) route it can take
    - robot moves along that route and explores each node in the route
    - robot does so until it encounters something (another robot, wall)
   
    - robot continues until it no longer has areas to explore
        - when it has no new areas to explore
            - robot moves arbitrarily (i.e. moving until it hits a wall, then turning right and moving again)
            - robot moves until its laser scan sees an open area or another robot

Discussion of Algorithm:
    - the algorithm will function correctly because of the wandering nature of the robot when it has no other objectives
    - need to determine how to know when to stop and find the exit (could have a 'rescue' intiative by the robot who found the exit)
        - this 'rescue' initiative would be similar to the wandering robot implementation
        - when rescue initiative is initiated, robot will wander around the map, sharing its map with robots it encounters while simultaneously
          building its own map up so that any robot it encounters will have a clear exit path
        - relies on quick exploration so that no robot is pulled out too early
    - considering a 'gatekeeper' type node that is initialized if there is a single-node opening to a partition of the map that has already been fully explored
        - functionality: in the real world, a simple marker that our explorers have access to that can be placed down in the environment
        - an immobile bot that only map shares with any other robot it encounters
        - frees the other robot for further exploration and prevents repeat exploration

'''

# Import of python modules.
from cmath import cos, sin
import math
import numpy as np
import random
import time
import tf
from simple_maze_exploring.bfs import BFS
from simple_maze_exploring.drive_line import DriveLine
#import queue
#from turtle import right # use of pi.

# import of relevant libraries.
import rospy # module for ROS APIs
from geometry_msgs.msg import Twist # message type for cmd_vel
from sensor_msgs.msg import LaserScan # message type for scan
from nav_msgs.msg import Odometry #message type for odom 
from nav_msgs.msg import OccupancyGrid # Message type for map data

# Constants.
FREQUENCY = 2 #Hz.
LINEAR_VELOCITY = 0.2 # m/s
ANGULAR_VELOCITY = math.pi/4 # rad/s
LASER_ANGLE_FRONT = 0 # radians
MIN_THRESHOLD_DISTANCE = 0.5 # m, threshold distance.
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'
DEFAULT_SCAN_TOPIC = 'base_scan'
DEFAULT_ODOM_TOPIC = 'odom' 
DEFAULT_POS_TOPIC = 'pos'
WALL_AVOID_RANGE = 1.5
#NUM_ROBOTS = 6 # (num_robots is actually one more than this)

class Explorer_Elliot():
    def __init__(self, linear_velocity=LINEAR_VELOCITY, angular_velocity=ANGULAR_VELOCITY):
        """Constructor."""\
        # Get robot name and node namespace
        self.robot_name = rospy.get_param("~robot_name") 
        curr = rospy.get_namespace()        
        # Setting up publishers/subscribers.
        self._cmd_pub = rospy.Publisher(DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)
        
        # Setting up subscriber.
        self._odom_sub = rospy.Subscriber(curr + DEFAULT_ODOM_TOPIC, Odometry, self._odom_callback, queue_size=1)

        # Setting up map subsciber (gets map generated from gmapping)
        self._map_sub = rospy.Subscriber("/%s/map" % self.robot_name, OccupancyGrid, self._map_callback, queue_size=1)

        # Other variables.
        self.linear_velocity = linear_velocity # Constant linear velocity set.
        self.angular_velocity = angular_velocity # Constant angular velocity set.

        self.location = None
        self.map_metadata = None
        self.my_map = None
        self.driver = DriveLine(self.robot_name)


    def stop(self): 
        """Stop the robot."""
        twist_msg = Twist()
        self._cmd_pub.publish(twist_msg)

    def _odom_callback(self, msg):
        # print("ODOM DATA: " + str(msg))
        #Processing the odom location message
        xpos=msg.pose.pose.position.x #get all necessary information from the robot
        ypos=msg.pose.pose.position.y
        orient=msg.pose.pose.orientation
        self.location = [xpos, ypos, orient]

    def _map_callback(self, msg):
        """
        Simply saves the map for later use
        :param msg:             An OccupancyGrid message
        :return:
        """
        print("------------------------GOT MAP MESSAGE------------------------")
        temp_grid = np.copy(msg.data)


        # for row_id in range(msg.info.width):
        #     for col_id in range(msg.info.height):
        #         # spread 2s out from every 1
        #         if temp_grid[row_id*msg.info.height + col_id] == 1:
        #             for i in range(wall_avoid_cells*2 + 1):
        #                 row_offset = i - (wall_avoid_cells + 1)
        #                 for j in range(wall_avoid_cells*2 + 1):
        #                     col_offset = j - (wall_avoid_cells + 1)


        self.my_map = temp_grid
        self.map_metadata = msg.info
        print("------------------------SET MAP------------------------")

    def explore(self):
        '''
        Robot does the following:
        1. TODO -- rotate in a circle to try to find other robots
        2. bfs to try to find a goal position (i.e., path to nearest accessible unexplored location)
        3. TODO -- tell the action server to drive to that position
        '''
        
        while self.location is None or self.my_map is None:
            print("is none")
            return
        curr = rospy.get_namespace()

        # bfs expects a 2d array rather than a flat array
        grid_for_search = np.reshape(self.my_map, (self.map_metadata.height, self.map_metadata.width))
        initial_pos = {"x": 0, "y": 0}
        print("INITIAL POSE IN NORMAL COORDS: " + str(initial_pos))
        initial_pos["x"] = int((self.location[0] - self.map_metadata.origin.position.x) / self.map_metadata.resolution)
        initial_pos["y"] = int((self.location[1] - self.map_metadata.origin.position.y) / self.map_metadata.resolution)

        print("INITIAL POS: " + str(initial_pos))

        bfs = BFS(initial_pos, grid_for_search)
        traceback = bfs.perform_search(0.1)
        print("TRACEBACK: " + str(traceback))

        wall_avoid_cells = int(WALL_AVOID_RANGE / self.map_metadata.resolution)
        print("AVOID CELLS: " + str(wall_avoid_cells))

        new_traceback = [traceback[0]]

        # Edit traceback front to back to include no driving points within a certain distance of a wall.
        found_wall = False
        for i in range(len(traceback)-1):
            curr = traceback[i+1]
            col = curr["x"]
            row = curr["y"]
            # if we're anywhere near a wall, this is not a valid waypoint
            for row_offset in range(-wall_avoid_cells, wall_avoid_cells+1, 1):
                for col_offset in range(-wall_avoid_cells, wall_avoid_cells+1, 1):
                    if 0 <= row_offset+row < self.map_metadata.height and 0 <= col_offset+col < self.map_metadata.width:
                        if grid_for_search[row_offset+row][col_offset+col] == 1:
                            found_wall = True
                            break

                if found_wall:
                    break

            if not found_wall:
                new_traceback.append(curr)
            else:
                break


        # Restores the x-y resolution, rather than the grid resolution
        for i in range(len(new_traceback)):
            new_traceback[i] = [
                (new_traceback[i]["x"] * self.map_metadata.resolution) + self.map_metadata.origin.position.x,
                (new_traceback[i]["y"] * self.map_metadata.resolution) + self.map_metadata.origin.position.y,
            ]

        print("TRACEBACK AFTER REFORMAT: " + str(new_traceback))

        self.driver.draw_arbitrary_polygon(new_traceback)


def main():
    """Main function."""

    # 1st. initialization of node.
    rospy.init_node("explorer")
    
    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)
    
    # Initialization of the class for the communicator.
    explorer = Explorer_Elliot()
    
    # If interrupted, send a stop command.
    rospy.on_shutdown(explorer.stop)

    try:
        while not rospy.is_shutdown():
            rate = rospy.Rate(FREQUENCY)

            explorer.explore()

            #Calculate velocity
            # vel = Twist()                       #new twist message -AK, PA4
            # velocity = np.array([ang_vel, lin_vel]) 
            # vel.angular.z = velocity[0]
            # if (velocity[0] > 0.2) or (velocity[0] < -0.2):
            #     explorer._cmd_pub.publish(vel)     #first publish angular -AK, PA4
            #     time.sleep(1)
            # elif (velocity[0] < 0.2 and velocity[0] > 0) or (velocity[0] < 0 and velocity[0] > -0.2):
            #     vel.linear.x = velocity[1]
            #     explorer._cmd_pub.publish(vel)     #then publish linear -AK, PA4
            #     time.sleep(1)

            rate.sleep()

    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
    """Run the main function."""
    
    main()
