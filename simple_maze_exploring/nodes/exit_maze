#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

# Import of python modules.
import math # use of pi.
import random #use for random colision avoidance angle

# import of relevant libraries.
import rospy # module for ROS APIs
from geometry_msgs.msg import PoseStamped # message type for cmd_vel
from nav_msgs.msg import Odometry, Path
import json
import numpy as np
import rosnode
import os 
#graph specific imports
from simple_maze_exploring.parse_graph import *
from simple_maze_exploring.drive_line import DriveLine

# Constants.
FREQUENCY = 10 #Hz.
LINEAR_VELOCITY = 0.1 #/ FACTOR # m/s
ANGULAR_VELOCITY = math.pi / 8 #/ FACTOR # rad/s
LASER_ANGLE_FRONT = 0 # radians
MIN_THRESHOLD_DISTANCE = 0.5 # m, threshold distance.
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'
DEFAULT_SCAN_TOPIC = 'scan'
ROBOT_MERGE_TOPIC = "/merge"

colors = {0: [255, 0, 0, 255], 1: [0, 255, 0, 255]}


class ExitMaze:
    def __init__(self, graph):
        self._graph = graph
        self._nx_graph = create_nx_graph(graph[1]) #use parsed edge graph to create networkx graph
        
        self._drive = DriveLine(rospy.get_namespace())
        rospy.sleep(2) #wait for odom to publish
        
        #compute the id of the node closest to the current robot
        self._start_id = -1
        cur_pos = np.array([self._drive.position.x, self._drive.position.y])
        min_dist = 1e30
        for k,v in self._graph[0].items():
            node_pos = np.array([v['x'], v['y']])
            dist = np.linalg.norm(cur_pos - node_pos)
            if dist < min_dist:
                min_dist = dist
                self._start_id = k

        print("CLOSEST NODE IN GRAPH: ", self._start_id)
        self._end_id = 2

    def run(self):
        path = nx.dijkstra_path(self._nx_graph, self._start_id, self._end_id)
        r_id = float(rospy.get_namespace().strip('/').split("_")[1])
        for node in path:
            cur_pos = np.array([self._drive.position.x, self._drive.position.y])
            node_pos = np.array([self._graph[0][node]['x'], self._graph[0][node]['y']])
            #move to node
            self._drive.move_to_point(node_pos - cur_pos, self._drive.orientation)
            self._drive.move(0.0, 0.0)
            rospy.sleep(3.0 * r_id) #sleep by id so robots don't crash into eachother while turning


def main():
    """Main function."""

    # 1st. initialization of node.
    rospy.init_node("exit_maze")
    
    # Sleep until the maze has been fully mapped
    while rospy.get_namespace() + "explorer" in rosnode.get_node_names():
        pass
    #sleep to make sure gmapping writes the file
    rospy.sleep(2)
    #os.chdir("/home/wojciechs-lab/robotics_final/src/cs69-final-project/")
    print("MAZE EXPLORATION COMPLETE", os.getcwd())
    #convert the map file
    
    #os.system("convert completed_maps/smallmap.pgm completed_maps/map.png")
    #run the node generator
    #os.system("./imedit/build/nodegen completed_maps/map.png")
    graph = r'[{"x": -15.0, "y": 15.0, "id": 1, "neighbors": [2]}, {"x":  13.0, "y": 13.0, "id": 2, "neighbors": [1, 3]}, {"x":  12.0, "y": -8.0, "id": 3, "neighbors": [2, 4]}, {"x":  10.0, "y": -8.0, "id": 4, "neighbors": [5, 7]}, {"x":   8.0, "y":  1.0, "id": 5, "neighbors": [6, 4]}, {"x":  -4.0, "y":  2.0, "id": 6, "neighbors": [5]}, {"x":  -4.0, "y": -8.0, "id": 7, "neighbors": [8, 4]}, {"x": -15.0, "y":-10.0, "id": 8, "neighbors": [7, 9]}, {"x":  -4.0, "y":-15.0, "id": 9, "neighbors": [8]}]'
    graph = parse_json_graph(graph)
   
    broadcast_node = ExitMaze(graph)
    try:
        broadcast_node.run()
    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")
    rospy.spin()
if __name__ == "__main__":
    """Run the main function."""
    main()