#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# merge forwarder, written by Elliot Potter
# Nov 2022

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations
import rospy  # module for ROS APIs
from std_msgs.msg import String
import json
from nav_msgs.msg import OccupancyGrid  # Message type for map data

# Format: /robot_0/map
OCCUPANCY_GRID_IN_TOPIC = "/map"
# Format: /robot_0/updated_map
OCCUPANCY_GRID_UPDATED_TOPIC = "/updated_map"
# Format: /robot_0/robot_0/current_map -- the first robot_0 is the namespace to update, second is the namespace doing
# the updating
OCCUPANCY_GRID_OUT_TOPIC = "/current_map"


class MapForwarder:
    def __init__(self, robot_name):
        self.robot_name = robot_name

        self.current_header = None
        self.current_grid = None
        self.current_metadata = None
        self.different_from_gmapping = False  # set this to True when we receive a message on /updated_map

        # set up publishers and subscribers
        print("/" + robot_name + OCCUPANCY_GRID_IN_TOPIC)
        self.gmapping_sub = rospy.Subscriber("/" + robot_name + OCCUPANCY_GRID_IN_TOPIC, OccupancyGrid,
                                             self.gmapping_callback)
        self.updates_sub = rospy.Subscriber("/" + robot_name + OCCUPANCY_GRID_UPDATED_TOPIC, OccupancyGrid,
                                            self.updated_callback)
        self.current_pub = rospy.Publisher(robot_name + OCCUPANCY_GRID_OUT_TOPIC, OccupancyGrid, queue_size=1)

        print("MAP_FORWARDER: finished initialization")

    def gmapping_callback(self, msg):
        """
        We receive a new occupancy grid on the gmapping topic: we want to merge it with the current grid

        We assume the two maps have the same origin and resolution.
        """
        print("GMAPPING_CALLBACK: hit gmapping callback")

        if not self.different_from_gmapping:
            self.current_header = msg.header
            self.current_grid = msg.data
            self.current_metadata = msg.info
        else:
            if (msg.info.origin.x != self.current_metadata.origin.x or
                    msg.info.origin.y != self.current_metadata.origin.y or
                    msg.info.origin.z != self.current_metadata.origin.z
            ):
                print("GMAPPING_CALLBACK: Origin mismatch! " + str(msg.info.origin) + ", " + str(self.current_metadata.origin))

            else:
                new_header = self.current_header
                new_metadata = self.current_grid
                new_grid = self.current_metadata

                # if the new data explores unexplored space, edit those cells
                for row_id in range(msg.info.height):
                    for col_id in range(msg.info.width):
                        if (new_grid[row_id * new_metadata.info.width + col_id] == -1 and
                                msg.data[row_id * msg.info.width + col_id] != -1
                        ):
                            new_grid[row_id * new_metadata.info.width + col_id] = msg.data[
                                row_id * msg.info.width + col_id]

                self.current_header = new_header
                self.current_grid = new_grid
                self.current_metadata = new_metadata

        # publish the current grid
        grid = OccupancyGrid()
        grid.header = self.current_header
        grid.info = self.current_metadata
        grid.data = self.current_grid
        self.current_pub.publish(grid)

    def updated_callback(self, msg):
        """This is the most up-to-date map, which overrides the other grid / metadata stuff we have loaded"""
        print("UPDATED_CALLBACK: Received updated data!")

        self.different_from_gmapping = True
        if (msg.info.origin.x != self.current_metadata.origin.x or
                msg.info.origin.y != self.current_metadata.origin.y or
                msg.info.origin.z != self.current_metadata.origin.z
        ):
            print("UPDATED_CALLBACK: Origin mismatch! " + str(msg.info.origin) + ", " + str(self.current_metadata.origin))
        else:
            self.current_grid = msg.data
            self.current_metadata = msg.info


if __name__ == "__main__":
    rospy.init_node('map_forwarder')
    rospy.sleep(1)
    print("MAP_FORWARDER: starting up")
    robot_name = rospy.get_param("robot_name")
    handler = MapForwarder(robot_name)
    rospy.spin()
