#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# merge forwarder, written by Elliot Potter
# Nov 2022

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations
import rospy  # module for ROS APIs
from std_msgs.msg import String
import json
import numpy
from nav_msgs.msg import OccupancyGrid  # Message type for map data

# Format: /robot_0/map
OCCUPANCY_GRID_IN_TOPIC = "/map"
# Format: /robot_0/updated_map
OCCUPANCY_GRID_UPDATED_TOPIC = "/updated_map"
# Format: /robot_0/current_map -- the first robot_0 is the namespace doing the updating, second is the namespace
# to update
OCCUPANCY_GRID_OUT_TOPIC = "/current_map"


class MapForwarder:
    def __init__(self, robot_name):
        self.robot_name = robot_name

        self.current_header = None
        self.current_grid = None
        self.current_metadata = None
        self.different_from_gmapping = False  # set this to True when we receive a message on /updated_map
        self.finished_init = False

        # set up publishers and subscribers
        print("/" + robot_name + OCCUPANCY_GRID_IN_TOPIC)
        self.gmapping_sub = rospy.Subscriber("/" + robot_name + OCCUPANCY_GRID_IN_TOPIC, OccupancyGrid,
                                             self.gmapping_callback)
        self.updates_sub = rospy.Subscriber("/" + robot_name + OCCUPANCY_GRID_UPDATED_TOPIC, OccupancyGrid,
                                            self.updated_callback)
        self.current_pub = rospy.Publisher("/" + robot_name + OCCUPANCY_GRID_OUT_TOPIC,
                                           OccupancyGrid, queue_size=1)

        rospy.sleep(0.5)
        self.finished_init = True
        print("MAP_FORWARDER: finished initialization")

    def gmapping_callback(self, msg):
        """
        We receive a new occupancy grid on the gmapping topic: we want to merge it with the current grid

        We assume the two maps have the same origin, resolution and size
        """
        print("GMAPPING_CALLBACK: hit gmapping callback")

        if not self.finished_init:
            rospy.sleep(0.5)

        if not self.different_from_gmapping:
            self.current_header = msg.header
            self.current_grid = msg.data
            self.current_metadata = msg.info
        else:
            new_header = self.current_header
            new_metadata = self.current_metadata
            new_grid = self.current_grid

            temp_grid = numpy.copy(msg.data)

            # Easy case: same origin, resolution, height, width
            if (new_metadata.origin.position.x == new_metadata.origin.position.x and
                    new_metadata.origin.position.y == new_metadata.origin.position.y and
                    new_metadata.width == new_metadata.width and
                    new_metadata.height == new_metadata.height
            ):
                for i in range(new_metadata.height * new_metadata.width):
                    if temp_grid[i] == -1:
                        temp_grid[i] = msg.data[i]

    def updated_callback(self, msg):
        """This is the most up-to-date map, which overrides the other grid / metadata stuff we have loaded"""
        print("UPDATED_CALLBACK: Received updated data!")
        # self.different_from_gmapping = True
        #
        # self.current_grid = msg.data
        # self.current_metadata = msg.info

    def publish_grid(self):
        if self.current_grid is None:
            return

        # publish the current grid
        grid = OccupancyGrid()
        grid.header = self.current_header
        grid.info = self.current_metadata
        grid.data = self.current_grid
        # print("============= Publishing Grid...!")
        self.current_pub.publish(grid)


if __name__ == "__main__":
    rospy.init_node('map_forwarder')
    rospy.sleep(1)
    print("MAP_FORWARDER: starting up")
    robot_name = rospy.get_param("robot_name")
    handler = MapForwarder(robot_name)

    while not rospy.is_shutdown():
        handler.publish_grid()
        rospy.sleep(1)
