#!/usr/bin/env python
# The line above is important so that this file is interpreted with Python when running it.
# merge, written by Elliot Potter
# Oct 2022, with other code used from last fall

# Import of python modules.
import math  # use of pi.
import tf  # library for transformations
import rospy  # module for ROS APIs
from std_msgs.msg import String
import json
from nav_msgs.msg import OccupancyGrid # Message type for map data

MERGE_SIGNAL_TOPIC       = "/merge"
OCCUPANCY_GRID_IN_TOPIC  = "/current_map"
OCCUPANCY_GRID_OUT_TOPIC = "/updated_map"

class RobotFollower:
    def __init__(self, robot_count):
        self.robot_count = robot_count

        self.map_listeners = []

        for i in range(robot_count):
            self.map_listeners.append(
                rospy.Subscriber("/robot_" + str(i) + OCCUPANCY_GRID_IN_TOPIC, OccupancyGrid, self.map_callback)
            )


    def follower_callback(self, msg):
        """When we receive a follower request, we call the service with our name"""
        if self.has_followed:
            return
        service_name = msg.service_name
        print("robot_" + str(self.bot_id) + " received follower request; following on topic " + service_name)
        self.has_followed = True
        follow = rospy.ServiceProxy(service_name, RequestFollowers)
        follow("robot_" + str(self.bot_id))

    def execute_cb(self, msg):
        """Drives the robot to the target"""
        print("robot_" + str(self.bot_id) + " received a drive command")
        if self.is_driving:
            return

        x = msg.x
        y = msg.y
        self.is_driving = True
        simple_motion = SimpleMotion()
        current_point = (0, 0)
        current_orientation = 0
        desired_point = (x, y)
        simple_motion.rotate_to_point(current_orientation, current_point, desired_point)
        simple_motion.drive_to_point(current_point, desired_point)
        self.is_driving = False


if __name__ == "__main__":
    rospy.init_node('merge_handler')
    robot_count = rospy.get_param("robot_count")
    handler = MergeHandler(robot_count)
    rospy.spin()
